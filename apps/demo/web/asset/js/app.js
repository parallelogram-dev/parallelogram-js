(()=>{"use strict";var __webpack_modules__={35:()=>{eval('{\n;// ../../packages/core/dist/index.js\n// src/EventBus.js\nvar EventBus = class {\n  constructor() {\n    this.listeners = /* @__PURE__ */ new Map();\n  }\n  on(evt, fn) {\n    (this.listeners.get(evt) ?? this.listeners.set(evt, /* @__PURE__ */ new Set()).get(evt)).add(fn);\n    return () => this.off(evt, fn);\n  }\n  once(evt, fn) {\n    const off = this.on(evt, (p) => {\n      off();\n      fn(p);\n    });\n    return off;\n  }\n  off(evt, fn) {\n    const set = this.listeners.get(evt);\n    if (set) {\n      set.delete(fn);\n      if (!set.size) this.listeners.delete(evt);\n    }\n  }\n  emit(evt, payload) {\n    const set = this.listeners.get(evt);\n    if (!set) return;\n    for (const fn of [...set]) {\n      try {\n        fn(payload);\n      } catch (e) {\n        console.error(`[event:${evt}] handler error`, e);\n      }\n    }\n  }\n};\n\n// src/DevLogger.js\nvar DevLogger = class {\n  constructor(ns, enabled = false) {\n    this.ns = ns;\n    this.enabled = enabled;\n  }\n  setEnabled(v) {\n    this.enabled = !!v;\n  }\n  _pfx(level) {\n    return `${(/* @__PURE__ */ new Date()).toISOString()} [${this.ns}] ${level}:`;\n  }\n  log(...a) {\n    if (this.enabled) console.log(this._pfx("log"), ...a);\n  }\n  info(...a) {\n    if (this.enabled) console.info(this._pfx("info"), ...a);\n  }\n  warn(...a) {\n    if (this.enabled) console.warn(this._pfx("warn"), ...a);\n  }\n  error(...a) {\n    console.error(this._pfx("error"), ...a);\n  }\n  group(label) {\n    if (this.enabled && console.groupCollapsed) console.groupCollapsed(`[${this.ns}] ${label}`);\n  }\n  groupEnd() {\n    if (this.enabled && console.groupEnd) console.groupEnd();\n  }\n  time(label) {\n    if (this.enabled && console.time) console.time(`[${this.ns}] ${label}`);\n  }\n  timeEnd(label) {\n    if (this.enabled && console.timeEnd) console.timeEnd(`[${this.ns}] ${label}`);\n  }\n};\n\n// src/idle.js\nfunction createIdle() {\n  const ric = typeof window !== "undefined" && window.requestIdleCallback ? window.requestIdleCallback : (cb, { timeout } = {}) => setTimeout(() => cb({ didTimeout: false, timeRemaining: () => Math.max(0, 50) }), timeout ?? 1);\n  const cic = typeof window !== "undefined" && window.cancelIdleCallback ? window.cancelIdleCallback : (id) => clearTimeout(id);\n  const schedule = (fn, timeout = 1200) => ric(fn, { timeout });\n  schedule.cancel = cic;\n  return schedule;\n}\nfunction cancelIdle(id) {\n  const cic = typeof window !== "undefined" && window.cancelIdleCallback ? window.cancelIdleCallback : (id2) => clearTimeout(id2);\n  cic(id);\n}\n\n\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=index.js.map\n;// ../../packages/page/dist/index.js\n\n\n// src/BaseComponent.js\nvar BaseComponent = class {\n  constructor({ eventBus, logger, router }) {\n    this.eventBus = eventBus;\n    this.logger = logger;\n    this.router = router;\n    this.elements = /* @__PURE__ */ new WeakMap();\n  }\n  mount(el) {\n    if (this.elements.has(el)) return this.update(el);\n    const state = this._init(el);\n    this.elements.set(el, state);\n  }\n  update(el) {\n  }\n  unmount(el) {\n    var _a;\n    const state = this.elements.get(el);\n    if (!state) return;\n    try {\n      (_a = state.cleanup) == null ? void 0 : _a.call(state);\n    } finally {\n      this.elements.delete(el);\n    }\n  }\n  destroy() {\n    for (const el of this._elementsKeys()) this.unmount(el);\n  }\n  _elementsKeys() {\n    if (!this._keys) this._keys = /* @__PURE__ */ new Set();\n    return this._keys;\n  }\n  _track(el) {\n    if (!this._keys) this._keys = /* @__PURE__ */ new Set();\n    this._keys.add(el);\n  }\n  _untrack(el) {\n    var _a;\n    (_a = this._keys) == null ? void 0 : _a.delete(el);\n  }\n  _init(el) {\n    const controller = new AbortController();\n    const cleanup = () => {\n      controller.abort();\n      this._untrack(el);\n    };\n    this._track(el);\n    return { cleanup, controller };\n  }\n};\nvar QueuedComponentProxy = class extends BaseComponent {\n  constructor(onMount, onUnmount) {\n    super({ eventBus: { on() {\n    }, emit() {\n    } }, logger: { info() {\n    }, error() {\n    }, enabled: false }, router: null });\n    this._onMount = onMount;\n    this._onUnmount = onUnmount;\n  }\n  mount(el) {\n    this._onMount(el);\n  }\n  unmount(el) {\n    this._onUnmount(el);\n  }\n};\nvar idle = createIdle();\nvar PageManager = class {\n  constructor({ containerSelector, registry, eventBus, logger, router }) {\n    this.eventBus = eventBus;\n    this.logger = logger;\n    this.router = router;\n    this.containerSelector = containerSelector;\n    this.registry = registry;\n    this.instances = /* @__PURE__ */ new Map();\n    this.observer = null;\n    this.eventBus.on("route:success", ({ html }) => this.replaceFragment(html));\n    this.eventBus.on("route:pop", async ({ url }) => {\n      var _a, _b;\n      try {\n        const { data } = await this.router.get(url.toString());\n        if (typeof data === "string") this.replaceFragment(data, { fromPop: true });\n      } catch (e) {\n        (_b = (_a = this.logger).error) == null ? void 0 : _b.call(_a, "route:pop fetch failed", e);\n      }\n    });\n  }\n  get container() {\n    const el = document.querySelector(this.containerSelector);\n    if (!el) throw new Error(`Container not found: ${this.containerSelector}`);\n    return el;\n  }\n  replaceFragment(html, { fromPop = false } = {}) {\n    const root = this.container;\n    this.eventBus.emit("fragment:will-unmount", { root });\n    this.unmountAllWithin(root);\n    const tpl = document.createElement("template");\n    tpl.innerHTML = html.trim();\n    root.replaceChildren(...tpl.content.childNodes);\n    this.eventBus.emit("fragment:did-mount", { root });\n    this.mountAllWithin(root);\n    idle(() => this.mountAllWithin(root), 1200);\n    if (!this.observer) this._startObserver(root);\n  }\n  _startObserver(root) {\n    if (!("MutationObserver" in window)) return;\n    this.observer = new MutationObserver((mutations) => {\n      let added = [], removed = [];\n      for (const m of mutations) {\n        if (m.addedNodes) added = added.concat([...m.addedNodes].filter((n) => n.nodeType === 1));\n        if (m.removedNodes) removed = removed.concat([...m.removedNodes].filter((n) => n.nodeType === 1));\n      }\n      if (added.length) {\n        this.mountAllWithin(root, added);\n      }\n      if (removed.length) {\n        this.unmountRemoved(removed);\n      }\n    });\n    this.observer.observe(root, { childList: true, subtree: true });\n  }\n  mountAllWithin(root, addedNodes = null) {\n    var _a, _b, _c, _d;\n    (_b = (_a = this.logger).group) == null ? void 0 : _b.call(_a, "mountAllWithin");\n    try {\n      for (const cfg of this.registry) {\n        const scope = addedNodes ? addedNodes : [root];\n        const els = scope.flatMap((node) => [...node.querySelectorAll(cfg.selector)]);\n        if (!els.length) continue;\n        const instance = this._ensureInstance(cfg);\n        for (const el of els) instance.mount(el);\n      }\n    } finally {\n      (_d = (_c = this.logger).groupEnd) == null ? void 0 : _d.call(_c);\n    }\n  }\n  unmountAllWithin(root) {\n    var _a, _b, _c, _d, _e;\n    (_b = (_a = this.logger).group) == null ? void 0 : _b.call(_a, "unmountAllWithin");\n    try {\n      for (const inst of this.instances.values()) {\n        for (const el of ((_c = inst._elementsKeys) == null ? void 0 : _c.call(inst)) || []) {\n          if (root.contains(el)) inst.unmount(el);\n        }\n      }\n    } finally {\n      (_e = (_d = this.logger).groupEnd) == null ? void 0 : _e.call(_d);\n    }\n  }\n  unmountRemoved(nodes) {\n    var _a;\n    for (const inst of this.instances.values()) {\n      for (const el of ((_a = inst._elementsKeys) == null ? void 0 : _a.call(inst)) || []) {\n        if (!document.documentElement.contains(el)) inst.unmount(el);\n      }\n    }\n  }\n  _ensureInstance(cfg) {\n    var _a;\n    let inst = this.instances.get(cfg.name);\n    if (inst) return inst;\n    if ((_a = cfg.dependsOn) == null ? void 0 : _a.length) {\n      for (const dep of cfg.dependsOn) {\n        const depCfg = this.registry.find((c) => c.name === dep);\n        if (depCfg) this._ensureInstance(depCfg);\n      }\n    }\n    const ctorPromiseLike = cfg.loader();\n    const ctorMaybe = ctorPromiseLike instanceof Promise ? null : ctorPromiseLike;\n    const create = (Ctor) => {\n      const i = new Ctor({ eventBus: this.eventBus, logger: this.logger, router: this.router });\n      this.instances.set(cfg.name, i);\n      return i;\n    };\n    if (ctorMaybe) return create(ctorMaybe.default);\n    const queue = [];\n    const placeholder = new QueuedComponentProxy((el) => queue.push(["mount", el]), (el) => queue.push(["unmount", el]));\n    this.instances.set(cfg.name, placeholder);\n    cfg.loader().then((mod) => {\n      var _a2, _b;\n      const real = create(mod.default);\n      for (const [action, el] of queue) {\n        try {\n          real[action](el);\n        } catch (e) {\n          (_b = (_a2 = this.logger).error) == null ? void 0 : _b.call(_a2, `dequeued ${cfg.name}.${action} failed`, e);\n        }\n      }\n      this.instances.set(cfg.name, real);\n    }).catch((e) => {\n      var _a2, _b;\n      return (_b = (_a2 = this.logger).error) == null ? void 0 : _b.call(_a2, `Failed to load component ${cfg.name}`, e);\n    });\n    return placeholder;\n  }\n};\n\n\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=index.js.map\n;// ../../packages/components/dist/index.js\n// src/XModal.js\nvar XModal = class extends HTMLElement {\n  static get observedAttributes() {\n    return ["open"];\n  }\n  constructor() {\n    super();\n    const root = this.attachShadow({ mode: "open" });\n    root.innerHTML = `\n      <style>\n        :host{ display:none; }\n        :host([open]){ display:block; position:fixed; inset:0; z-index:9999; }\n        .backdrop{ position:absolute; inset:0; background:rgba(0,0,0,.45); }\n        .panel{ position:absolute; inset:auto; top:50%; left:50%; transform:translate(-50%,-50%);\n                min-width: min(92vw, 640px); max-width: 92vw; max-height: 86vh; overflow:auto;\n                background:#0f172a; color:#e5e7eb; border:1px solid rgba(255,255,255,.08); border-radius:16px; box-shadow:0 20px 60px rgba(0,0,0,.5); }\n        header{ display:flex; align-items:center; gap:8px; padding:12px 14px; border-bottom:1px solid rgba(255,255,255,.08); position:sticky; top:0; background:#0f172a; }\n        header h2{ margin:0; font-size:18px; line-height:1.3; }\n        .spacer{ flex:1; }\n        button.icon{ all:unset; display:inline-flex; align-items:center; justify-content:center; width:28px; height:28px; border-radius:8px; cursor:pointer; }\n        section{ padding:14px; }\n        footer{ padding:12px 14px; border-top:1px solid rgba(255,255,255,.08); display:flex; gap:8px; justify-content:flex-end; position:sticky; bottom:0; background:#0f172a; }\n        ::slotted(.btn){ appearance:none; border:0; border-radius:10px; padding:10px 14px; background:#1f2937; color:#fff; cursor:pointer; }\n        ::slotted(.btn.accent){ background:#60a5fa; color:#0b1020; font-weight:700; }\n      </style>\n      <div class="backdrop" part="backdrop"></div>\n      <div class="panel" part="panel" role="dialog" aria-modal="true">\n        <header part="header">\n          <slot name="title"><h2>Dialog</h2></slot>\n          <div class="spacer"></div>\n          <button class="icon" aria-label="Close" part="close">\\xD7</button>\n        </header>\n        <section part="content"><slot></slot></section>\n        <footer part="footer"><slot name="actions"></slot></footer>\n      </div>\n    `;\n    this._els = {\n      backdrop: root.querySelector(".backdrop"),\n      panel: root.querySelector(".panel"),\n      close: root.querySelector("button.icon")\n    };\n    this._onKeydown = this._onKeydown.bind(this);\n    this._onFocus = this._onFocus.bind(this);\n  }\n  connectedCallback() {\n    this._upgradeProperty("open");\n    this._els.backdrop.addEventListener("click", () => this._closable() && this.close());\n    this._els.close.addEventListener("click", () => this._closable() && this.close());\n    document.addEventListener("keydown", this._onKeydown);\n    this.addEventListener("focusin", this._onFocus);\n  }\n  disconnectedCallback() {\n    document.removeEventListener("keydown", this._onKeydown);\n    this.removeEventListener("focusin", this._onFocus);\n  }\n  attributeChangedCallback(name) {\n    if (name === "open") {\n      if (this.hasAttribute("open")) {\n        this.dispatchEvent(new CustomEvent("open", { bubbles: true }));\n        const f = this._firstFocusable();\n        (f || this._els.close).focus({ preventScroll: true });\n      } else {\n        this.dispatchEvent(new CustomEvent("close", { bubbles: true }));\n      }\n    }\n  }\n  open() {\n    this.setAttribute("open", "");\n  }\n  close() {\n    this.removeAttribute("open");\n  }\n  toggle(force) {\n    if (force === true) this.open();\n    else if (force === false) this.close();\n    else this.hasAttribute("open") ? this.close() : this.open();\n  }\n  _closable() {\n    return this.getAttribute("closable") !== "false";\n  }\n  _upgradeProperty(prop) {\n    if (this.hasOwnProperty(prop)) {\n      let v = this[prop];\n      delete this[prop];\n      this[prop] = v;\n    }\n  }\n  _onKeydown(e) {\n    if (!this.hasAttribute("open")) return;\n    if (e.key === "Escape" && this._closable()) {\n      this.close();\n    }\n    if (e.key === "Tab") {\n      this._trapTab(e);\n    }\n  }\n  _onFocus() {\n    if (!this.contains(document.activeElement)) {\n      (this._firstFocusable() || this._els.close).focus({ preventScroll: true });\n    }\n  }\n  _focusables() {\n    const sel = ["a[href]", "button", "input", "select", "textarea", \'[tabindex]:not([tabindex="-1"])\'].join(",");\n    return [...this.querySelectorAll(sel)].filter((el) => !el.hasAttribute("disabled"));\n  }\n  _firstFocusable() {\n    return this._focusables()[0];\n  }\n  _trapTab(e) {\n    const f = this._focusables();\n    if (!f.length) return;\n    const first = f[0], last = f[f.length - 1];\n    const active = this.contains(document.activeElement) ? document.activeElement : null;\n    if (e.shiftKey) {\n      if (active === first || !active) {\n        last.focus();\n        e.preventDefault();\n      }\n    } else {\n      if (active === last) {\n        first.focus();\n        e.preventDefault();\n      }\n    }\n  }\n};\nif (!customElements.get("x-modal")) customElements.define("x-modal", XModal);\n\n\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=index.js.map\n;// ../../packages/ui/dist/index.js\n// src/XToasts.js\nvar XToasts = class extends HTMLElement {\n  constructor() {\n    super();\n    const root = this.attachShadow({ mode: "open" });\n    root.innerHTML = `\n      <style>\n        :host{position:fixed; inset:auto auto auto 0; padding:12px; z-index:2147483647; display:grid; gap:8px;}\n        :host([placement="top-left"]){ top:0; left:0; }\n        :host([placement="top-right"]){ top:0; right:0; left:auto; }\n        :host([placement="bottom-right"]){ bottom:0; right:0; left:auto; }\n        :host([placement="bottom-left"]){ bottom:0; left:0; }\n        .toast{ padding:10px 12px; border-radius:8px; color:#fff; box-shadow:0 6px 20px rgba(0,0,0,.25); opacity:0; transform: translateY(-6px);\n                animation: in .18s ease-out forwards; cursor:pointer; font: 14px/1.4 system-ui, -apple-system, Segoe UI, Roboto, sans-serif; outline:none;}\n        .toast.info{ background:#111827; }\n        .toast.success{ background:#065f46; }\n        .toast.warn{ background:#7c2d12; }\n        .toast.error{ background:#7f1d1d; }\n        .toast.loading{ background:#0f172a; }\n        @keyframes in{ to{ opacity:1; transform:none; } }\n        @keyframes out{ to{ opacity:0; transform: translateY(-6px); } }\n        .row{ display:flex; align-items:center; gap:8px; }\n        .msg{ white-space:pre-wrap; }\n        button.icon{ all:unset; display:inline-flex; align-items:center; justify-content:center; width:24px; height:24px; border-radius:6px; font-weight:700; }\n        button.action{ all:unset; padding:4px 8px; border-radius:6px; background:rgba(255,255,255,.15); font-weight:600; }\n        .spacer{ flex:1; }\n        .bar{ position:relative; height:6px; border-radius:999px; overflow:hidden; background: rgba(255,255,255,.18); margin-top:8px; }\n        .bar > .fill{ position:absolute; inset:0 auto 0 0; width:0%; background: rgba(255,255,255,.85); border-radius:inherit; }\n        .bar.indeterminate > .fill{ width:40%; animation: indet 1.2s ease-in-out infinite; }\n        @keyframes indet { 0%{ left:-40%; } 50%{ left:60%; } 100%{ left:100%; } }\n        .spin{ width:16px; height:16px; border-radius:50%; border:2px solid rgba(255,255,255,.35); border-top-color:#fff; animation: spin .8s linear infinite; }\n        @keyframes spin{ to{ transform: rotate(360deg); } }\n      </style>\n      <div id="wrap" role="region" aria-live="polite"></div>`;\n    this._wrap = root.getElementById("wrap");\n    this._id = 0;\n  }\n  toast({ message, type = "info", timeout = 4e3, allowHTML = false, action }) {\n    const id = ++this._id;\n    const el = document.createElement("div");\n    el.className = `toast ${type}`;\n    const role = type === "warn" || type === "error" ? "alert" : "status";\n    el.setAttribute("role", role);\n    el.tabIndex = 0;\n    const row = document.createElement("div");\n    row.className = "row";\n    const span = document.createElement("span");\n    span.className = "msg";\n    if (allowHTML) span.innerHTML = message;\n    else span.textContent = message;\n    const spacer = document.createElement("div");\n    spacer.className = "spacer";\n    let actionBtn = null;\n    if (action == null ? void 0 : action.label) {\n      actionBtn = document.createElement("button");\n      actionBtn.className = "action";\n      actionBtn.type = "button";\n      actionBtn.textContent = action.label;\n      actionBtn.addEventListener("click", (ev) => {\n        var _a;\n        this.dispatchEvent(new CustomEvent("toast:action", { detail: { id, type, message }, bubbles: true }));\n        (_a = action.onClick) == null ? void 0 : _a.call(action, ev);\n        remove();\n      });\n    }\n    const close = document.createElement("button");\n    close.className = "icon";\n    close.setAttribute("aria-label", "Dismiss notification");\n    close.textContent = "\\xD7";\n    row.append(span, spacer);\n    if (actionBtn) row.append(actionBtn);\n    row.append(close);\n    el.append(row);\n    this._wrap.append(el);\n    const removeNow = () => {\n      el.style.animation = "out .15s ease-in forwards";\n      setTimeout(() => el.remove(), 150);\n    };\n    let removed = false;\n    const remove = () => {\n      if (removed) return;\n      removed = true;\n      removeNow();\n      this.dispatchEvent(new CustomEvent("toast:close", { detail: { id, type, message }, bubbles: true }));\n    };\n    const tid = timeout ? setTimeout(remove, timeout) : null;\n    const cancelTimer = () => tid && clearTimeout(tid);\n    close.addEventListener("click", remove);\n    el.addEventListener("mouseenter", cancelTimer);\n    el.addEventListener("focusin", cancelTimer);\n    el.addEventListener("mouseleave", () => {\n      if (timeout && !removed) setTimeout(remove, 1e3);\n    });\n    this.dispatchEvent(new CustomEvent("toast:show", { detail: { id, type, message }, bubbles: true }));\n    return remove;\n  }\n  progress({ message, determinate = false, value = 0, max = 100, cancellable = false, onCancel }) {\n    const id = ++this._id;\n    const el = document.createElement("div");\n    el.className = "toast loading";\n    el.setAttribute("role", "status");\n    el.tabIndex = 0;\n    const row = document.createElement("div");\n    row.className = "row";\n    const spin = document.createElement("div");\n    spin.className = "spin";\n    row.append(spin);\n    const span = document.createElement("span");\n    span.className = "msg";\n    span.textContent = message;\n    row.append(span);\n    const spacer = document.createElement("div");\n    spacer.className = "spacer";\n    row.append(spacer);\n    const close = document.createElement("button");\n    close.className = "icon";\n    close.setAttribute("aria-label", cancellable ? "Cancel" : "Dismiss");\n    close.textContent = "\\u2A2F";\n    row.append(close);\n    el.append(row);\n    const bar = document.createElement("div");\n    bar.className = "bar" + (determinate ? "" : " indeterminate");\n    const fill = document.createElement("div");\n    fill.className = "fill";\n    bar.append(fill);\n    el.append(bar);\n    this._wrap.append(el);\n    const set = (n) => {\n      if (!determinate) return;\n      const pct = Math.max(0, Math.min(100, n / max * 100));\n      fill.style.width = pct + "%";\n    };\n    if (determinate) set(value);\n    const dismiss = () => el.remove();\n    const succeed = (m) => {\n      if (m) span.textContent = m;\n      el.classList.add("success");\n      setTimeout(dismiss, 1200);\n    };\n    const fail = (m) => {\n      if (m) span.textContent = m;\n      el.classList.add("error");\n      setTimeout(dismiss, 1600);\n    };\n    close.addEventListener("click", () => {\n      if (cancellable && onCancel) onCancel();\n      dismiss();\n    });\n    this.dispatchEvent(new CustomEvent("toast:show", { detail: { id, type: "loading", message }, bubbles: true }));\n    return { id, set, setMessage: (m) => span.textContent = m, succeed, fail, dismiss };\n  }\n};\nif (!customElements.get("x-toasts")) customElements.define("x-toasts", XToasts);\n\n// src/AlertManager.js\nvar AlertManager = class {\n  constructor({ logger, eventBus, placement = "top-right" }) {\n    this.logger = logger;\n    this.eventBus = eventBus;\n    this.el = document.querySelector("x-toasts") || document.body.appendChild(document.createElement("x-toasts"));\n    this.el.setAttribute("placement", placement);\n    this.el.addEventListener("toast:show", (e) => {\n      var _a, _b;\n      const d = e.detail;\n      (_b = (_a = this.logger).info) == null ? void 0 : _b.call(_a, "toast:show", d);\n      this.eventBus.emit("alerts:show", d);\n    });\n    this.el.addEventListener("toast:close", (e) => {\n      var _a, _b;\n      const d = e.detail;\n      (_b = (_a = this.logger).info) == null ? void 0 : _b.call(_a, "toast:close", d);\n      this.eventBus.emit("alerts:close", d);\n    });\n    this.el.addEventListener("toast:action", (e) => {\n      var _a, _b;\n      const d = e.detail;\n      (_b = (_a = this.logger).info) == null ? void 0 : _b.call(_a, "toast:action", d);\n      this.eventBus.emit("alerts:action", d);\n    });\n  }\n  toast(opts) {\n    var _a, _b;\n    const dismiss = this.el.toast(opts);\n    (_b = (_a = this.logger).info) == null ? void 0 : _b.call(_a, "toast", opts);\n    return dismiss;\n  }\n  progress(opts) {\n    return this.el.progress(opts);\n  }\n};\n\n\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=index.js.map\n;// ./src/js/main.js\n\n\n\n\nfunction kickoffEnterTransition(app){\n  app.classList.remove(\'is-entered\');\n  requestAnimationFrame(() => app.classList.add(\'is-entered\'));\n}\n\nfunction boot(){\n  const app = document.querySelector(\'#app\');\n  if (!app) return;\n\n  // Initial mount once\n  kickoffEnterTransition(app);\n\n  // Example router / PageManager wiring\n  const pageManager = new PageManager({ container: app });\n\n  document.addEventListener(\'event:route:success\', async (e) => {\n    // out\n    app.classList.remove(\'is-entered\');\n    // small frame to allow CSS to pick up state change\n    await new Promise(r => requestAnimationFrame(r));\n\n    // render new content (assuming PageManager knows how)\n    await pageManager.render(e.detail);\n\n    // (re)mount components in the new DOM\n    safeMountAllWithin(app);\n\n    // in\n    requestAnimationFrame(() => app.classList.add(\'is-entered\'));\n  });\n}\n\ndocument.addEventListener(\'DOMContentLoaded\', boot);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///35\n\n}')},944:()=>{eval("{// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQ0LmpzIiwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3Njc3MvYmFzZS5zY3NzPzViNDQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///944\n\n}")}};__webpack_modules__[35]();var __webpack_exports__={};__webpack_modules__[944]()})();